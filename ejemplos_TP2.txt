Ejemplos de invocacion y respuesta:

--Punto 4
auto1 = Auto { patente = "FG884NY", desgasteLlantas= [0.1,0.4,0.2,0], rpm = 1950, temperaturaAgua = 80, ultimoArreglo = (2,5,2017)}
auto2 = Auto { patente = "BKQ647", desgasteLlantas= [0.2,0.5,0.6,0.1], rpm = 2050, temperaturaAgua = 60, ultimoArreglo = (27,9,2018)}
auto3 = Auto { patente = "OFW321", desgasteLlantas= [0.1,0.1,0.1,0], rpm = 2020, temperaturaAgua = 75, ultimoArreglo = (5,1,2020)}
*Main> estaEnOrden [auto1,auto2,auto3]
True

auto4 = Auto { patente = "FG884NY", desgasteLlantas= [0.1,0.4,0.2,0], rpm = 1950, temperaturaAgua = 80, ultimoArreglo = (2,5,2017)}
auto5 = Auto { patente = "VBG546", desgasteLlantas= [0.3,0.5,0.6,0.1], rpm = 2050, temperaturaAgua = 60, ultimoArreglo = (5,1,2020)}
auto6 = Auto { patente = "MDA381", desgasteLlantas= [0.1,0.1,0.1,0], rpm = 2010, temperaturaAgua = 90, ultimoArreglo = (5,1,2016)}
*Main> estaEnOrden [auto4,auto5,auto6]                                                                                                     
False

auto7 = Auto { patente = "FG884NY", desgasteLlantas= [0.1,0.4,0.2,0], rpm = 1950, temperaturaAgua = 80, ultimoArreglo = (2,5,2017)}
*Main> estaEnOrden [auto7]
True

auto8 = Auto { patente = "AP002TM", desgasteLlantas= [0.1,0.4,0.2,0.1], rpm = 2050, temperaturaAgua = 60, ultimoArreglo = (5,1,2019)}
*Main> estaEnOrden [auto8]
False

--Punto 5
vehiculo1 = Auto { patente = "ABC123", desgasteLlantas= [0.5, 0.34, 0.89, 0.24] , rpm = 3000, temperaturaAgua = 50, ultimoArreglo = (12,1,2009)}
*Main> ordenReparacion (19,2,2019) [alfa,bravo,tango] vehiculo1
Auto {patente = "ABC123", desgasteLlantas = [0.0,0.0,0.0,0.0], rpm = 2000, temperaturaAgua = 50, ultimoArreglo = (19,2,2019)}

vehiculo2 = Auto { patente = "EFG456", desgasteLlantas= [0.5, 0.66, 0.89, 0.24] , rpm = 2950, temperaturaAgua = 99, ultimoArreglo = (12,1,2020)}
*Main> ordenReparacion (29,3,2020) [zulu,charly,alfa,lima] vehiculo2
Auto {patente = "EFG456", desgasteLlantas = [0.0,0.0,0.0,0.0], rpm = 2000, temperaturaAgua = 90, ultimoArreglo = (29,3,2020)}

--Punto 6
Parte 1

auto9a = Auto { patente = "BT001LF", desgasteLlantas= [0.51, 0.25, 0.21, 0.12] , rpm = 2150, temperaturaAgua = 80, ultimoArreglo = (13,9,2016)}

*Main> mecanicosQueDejanAutoEnCondiciones auto9a [alfa,bravo,charly,alfa]
2

Parte 2

auto9 = Auto { patente = "AT001LN", desgasteLlantas= [0.51, 0.25, 0.21, 0.12] , rpm = 2150, temperaturaAgua = 90, ultimoArreglo = (11,11,2014)}
auto10 = Auto { patente = "DJV215", desgasteLlantas= [0.61, 0.13, 0.11, 0.78] , rpm = 1858, temperaturaAgua = 99, ultimoArreglo = (19,1,2018)}
auto11 = Auto { patente = "DJV214", desgasteLlantas= [0.21, 0.35, 0.16, 0.32] , rpm = 1959, temperaturaAgua = 50, ultimoArreglo = (22,8,2017)}
auto12 = Auto { patente = "DFH029", desgasteLlantas= [0.80, 0.45, 0.19, 0.29] , rpm = 2112, temperaturaAgua = 88, ultimoArreglo = (30,9,2015)}

*Main> costoReparacionAutosConRevision [auto9,auto10,auto11,auto12]
27500

--Punto 7
Parte 1
Si tengo una lista de tecnicos infinitos y llamo a:
autoArreglo = Auto { patente = "DWG164", desgasteLlantas= [0.70, 0.45, 0.19, 0.29] , rpm = 3223, temperaturaAgua = 93, ultimoArreglo = (23,11,2017)}
*Main> mecanicosQueDejanAutoEnCondicionesPrimero autoArreglo tecnicosInfinitos
En este caso, dado a que se tendria que dar la operacion del tecnico sobre el auto, antes de poder devolver una lista con todos
los que cumplen la condicion, se debe ejecutar todas las acciones posibles en la lista de elementos. Ésta, al ser infinita, no
dara finalización jamás, dado a que no terminará de aplicar la accion de los infinitos tecnicos sobre los autos.

Parte 2
Si tengo una lista infinita de autos, aplicando:
*Main> costoReparacionAutosConRevision autosInfinitos
....No termina de ejecutar....
Como parametro acepta "autosInfinitos", el problema es que no termina de calcular el costo de reparacion total de la lista cuyos autos necesiten revision. 
Esto ocurre debido a que como la lista de autos se genera de forma recursiva, la funcion costoReparacionAutosConRevision, que espera una lista y
devuelve el costo, va tomar como parametro todos los elementos de esa lista, que no tiene un caso base que corte la recursividad.

Entonces para contar los primeros 3 elementos de la lista de autos:
*Main> costoReparacionAutosConRevisionPrimeros3 autosInfinitos
45000
En esta version de la funcion, si admite lista de autos infinitos y me devuelve el costo.
Gracias a la evaluacion diferida, como la lista se genera en forma recursiva, si se aplica la nueva funcion esta espera hasta cuando la necesite
aplicar, en este caso cuando la lista tenga 3 elementos.